// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("PRISMA_MONGO_URI")
}

enum ContentType {
  Video
  Text
}

model Course {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String       @unique
  description   String
  thumbnail     String
  sections      Section[]
  users         User[]       @relation(fields: [userIDs], references: [id])
  userIDs       String[]     @db.ObjectId
  CourseGroup   CourseGroup? @relation(fields: [courseGroupId], references: [id])
  courseGroupId String?      @db.ObjectId
}

model CourseGroup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  courses     Course[]
}

model Section {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  Course   Course?  @relation(fields: [courseId], references: [id])
  courseId String?  @db.ObjectId
  name     String
  lessons  Lesson[]
}

model Lesson {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  contentType     ContentType
  resourceUrl     String
  isFree          Boolean
  durationSeconds Int

  Section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?  @db.ObjectId
}

// Authjs stuff and user information

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // App fields
  subscribed Boolean  @default(false)
  courses    Course[] @relation(fields: [courseIDs], references: [id])
  courseIDs  String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
